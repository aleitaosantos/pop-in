{"ast":null,"code":"import _slicedToArray from\"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _classCallCheck from\"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from\"react\";import Cell from\"./Cell\";import'./Board.css';import{jsx as _jsx}from\"react/jsx-runtime\";var Board=/*#__PURE__*/function(_Component){_inherits(Board,_Component);var _super=_createSuper(Board);function Board(props){var _this;_classCallCheck(this,Board);_this=_super.call(this,props);// TODO: set initial state\n_this.state={hasWon:false,board:_this.createBoard()};return _this;}/** create a board nrows high/ncols wide, each cell randomly pop or unpop */_createClass(Board,[{key:\"createBoard\",value:function createBoard(){var board=[];for(var y=0;y<this.props.nrows;y++){var row=[];for(var x=0;x<this.props.ncols;x++){row.push(Math.random()<this.props.chanceLightStartsOn);}board.push(row);}return board;}/** handle changing a cell: update board & determine if winner */},{key:\"flipCellsAround\",value:function flipCellsAround(coord){var _this$props=this.props,ncols=_this$props.ncols,nrows=_this$props.nrows;var board=this.state.board;var _coord$split$map=coord.split(\"-\").map(Number),_coord$split$map2=_slicedToArray(_coord$split$map,2),y=_coord$split$map2[0],x=_coord$split$map2[1];function flipCell(y,x){// if this coord is actually on board, flip it\nif(x>=0&&x<ncols&&y>=0&&y<nrows){board[y][x]=!board[y][x];}}//Pop initial cell\nflipCell(y,x);//pop center\nflipCell(y,x-1);//pop left\nflipCell(y,x+1);//pop right\nflipCell(y-1,x);//pop below\nflipCell(y+1,x);//pop above\n// flipCell( y - 1, x + 1 ); //hex\n// flipCell( y + 1, x - 1 ); //hex\n// win when every cell is turned off\n// TODO: determine is the game has been won\nvar hasWon=board.every(function(row){return row.every(function(cell){return cell;});});this.setState({board:board,hasWon:hasWon});}/** Render game board or winning message. */ // make table board\n},{key:\"makeTable\",value:function makeTable(){var _this2=this;var tableBoard=[];for(var y=0;y<this.props.nrows;y++){var row=[];var _loop=function _loop(x){var coord=\"\".concat(y,\"-\").concat(x);row.push(/*#__PURE__*/_jsx(Cell,{isPop:_this2.state.board[y][x],flipCellsAroundMe:function flipCellsAroundMe(){return _this2.flipCellsAround(coord);}},coord));};for(var x=0;x<this.props.ncols;x++){_loop(x);}tableBoard.push(/*#__PURE__*/_jsx(\"tr\",{children:row},y));}return/*#__PURE__*/_jsx(\"div\",{className:\"Board\",children:/*#__PURE__*/_jsx(\"table\",{children:/*#__PURE__*/_jsx(\"tbody\",{children:tableBoard})})});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(\"div\",{children:this.state.hasWon?/*#__PURE__*/_jsx(\"div\",{className:\"winner\",children:\" YOU WIN! \"}):/*#__PURE__*/_jsx(\"div\",{children:this.makeTable()})});}}]);return Board;}(Component);Board.defaultProps={nrows:5,ncols:5,chanceLightStartsOn:0.25};export default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tableBoard","flipCellsAround","makeTable","defaultProps"],"sources":["C:/Users/Alexandre/Documents/GitHub/lights-out/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n  constructor( props ) {\n    super( props );\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly pop or unpop */\n\n  createBoard() {\n    let board = [];\n    for ( let y = 0; y < this.props.nrows; y++ ) {\n      let row = [];\n      for ( let x = 0; x < this.props.ncols; x++ ) {\n        row.push( Math.random() < this.props.chanceLightStartsOn )\n      }\n      board.push( row );\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround( coord ) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [ y, x ] = coord.split( \"-\" ).map( Number );\n\n\n    function flipCell( y, x ) {\n      // if this coord is actually on board, flip it\n\n      if ( x >= 0 && x < ncols && y >= 0 && y < nrows ) {\n        board[ y ][ x ] = !board[ y ][ x ];\n      }\n    }\n    //Pop initial cell\n    flipCell( y, x );     //pop center\n    flipCell( y, x - 1 ); //pop left\n    flipCell( y, x + 1 ); //pop right\n    flipCell( y - 1, x ); //pop below\n    flipCell( y + 1, x ); //pop above\n    // flipCell( y - 1, x + 1 ); //hex\n    // flipCell( y + 1, x - 1 ); //hex\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every( row => row.every( cell => cell ) );\n    this.setState( { board: board, hasWon: hasWon } );\n  }\n\n\n  /** Render game board or winning message. */\n\n  // make table board\n  makeTable() {\n    let tableBoard = [];\n    for ( let y = 0; y < this.props.nrows; y++ ) {\n      let row = [];\n      for ( let x = 0; x < this.props.ncols; x++ ) {\n        let coord = `${ y }-${ x }`;\n        row.push(\n          <Cell\n            key={ coord }\n            isPop={ this.state.board[ y ][ x ] }\n            flipCellsAroundMe={ () => this.flipCellsAround( coord ) }\n          />\n        );\n      }\n      tableBoard.push( <tr key={ y }>{ row }</tr > );\n    }\n    return (\n      <div className='Board'>\n        <table >\n          <tbody>{ tableBoard }</tbody>\n        </table>\n      </div>\n    );\n  }\n  render() {\n    return (\n      <div>\n        { this.state.hasWon ? (\n          < div className='winner'> YOU WIN! </div>\n        ) : (\n          <div>\n            { this.makeTable() }\n          </div>\n        )\n        }\n      </div>\n    );\n  }\n\n\n}\n\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}