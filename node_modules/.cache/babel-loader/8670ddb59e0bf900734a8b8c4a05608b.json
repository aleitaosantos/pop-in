{"ast":null,"code":"import _slicedToArray from \"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Alexandre/Documents/GitHub/lights-out/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  var _super = _createSuper(Board);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _super.call(this, props); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {// if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","coord","ncols","nrows","split","map","Number","y","x","flipCell","setState","defaultProps","chanceLightStartsOn"],"sources":["C:/Users/Alexandre/Documents/GitHub/lights-out/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor( props ) {\n    super( props );\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround( coord ) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [ y, x ] = coord.split( \"-\" ).map( Number );\n\n\n    function flipCell( y, x ) {\n      // if this coord is actually on board, flip it\n\n      if ( x >= 0 && x < ncols && y >= 0 && y < nrows ) {\n        board[ y ][ x ] = !board[ y ][ x ];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState( { board, hasWon } );\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;;;EAMJ,eAAaC,KAAb,EAAqB;IAAA;;IAAA;;IACnB,0BAAOA,KAAP,EADmB,CAGnB;;IACA,MAAKC,KAAL,GAAa;MACXC,MAAM,EAAE,KADG;MAEXC,KAAK,EAAE,MAAKC,WAAL;IAFI,CAAb;IAJmB;EAQpB;EAED;;;;;WAEA,uBAAc;MACZ,IAAID,KAAK,GAAG,EAAZ,CADY,CAEZ;;MACA,OAAOA,KAAP;IACD;IAED;;;;WAEA,yBAAiBE,KAAjB,EAAyB;MACvB,kBAAuB,KAAKL,KAA5B;MAAA,IAAMM,KAAN,eAAMA,KAAN;MAAA,IAAaC,KAAb,eAAaA,KAAb;MACA,IAAIJ,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;MACA,uBAAeE,KAAK,CAACG,KAAN,CAAa,GAAb,EAAmBC,GAAnB,CAAwBC,MAAxB,CAAf;MAAA;MAAA,IAAMC,CAAN;MAAA,IAASC,CAAT;;MAGA,SAASC,QAAT,CAAmBF,CAAnB,EAAsBC,CAAtB,EAA0B;QACxB;QAEA,IAAKA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGN,KAAd,IAAuBK,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGJ,KAA1C,EAAkD;UAChDJ,KAAK,CAAEQ,CAAF,CAAL,CAAYC,CAAZ,IAAkB,CAACT,KAAK,CAAEQ,CAAF,CAAL,CAAYC,CAAZ,CAAnB;QACD;MACF,CAZsB,CAcvB;MAEA;MACA;;;MAEA,KAAKE,QAAL,CAAe;QAAEX,KAAK,EAALA,KAAF;QAASD,MAAM,EAANA;MAAT,CAAf;IACD;IAGD;;;;WAEA,kBAAS,CAEP;MAEA;MAEA;MAEA;IACD;;;;EA5DiBL,S;;AAAdE,K,CACGgB,Y,GAAe;EACpBR,KAAK,EAAE,CADa;EAEpBD,KAAK,EAAE,CAFa;EAGpBU,mBAAmB,EAAE;AAHD,C;AA+DxB,eAAejB,KAAf"},"metadata":{},"sourceType":"module"}